#
# Checking the conversions with older 0.0.x modules
#

use v6.d;
use Test;
use lib '../version-old/lib';
use lib 'lib';
use Date::Calendar::Strftime:api<1>;
use Date::Calendar::Aztec;
use Date::Calendar::Aztec::Cortes;
use Date::Calendar::Bahai;
use Date::Calendar::Bahai::Astronomical;
use Date::Calendar::Coptic;
use Date::Calendar::Ethiopic;
use Date::Calendar::Hebrew;
use Date::Calendar::Hijri;
use Date::Calendar::Gregorian;
use Date::Calendar::FrenchRevolutionary;
use Date::Calendar::FrenchRevolutionary::Arithmetic;
use Date::Calendar::FrenchRevolutionary::Astronomical;
use Date::Calendar::Julian;
use Date::Calendar::Julian::AUC;
use Date::Calendar::Maya;
use Date::Calendar::Maya::Astronomical;
use Date::Calendar::Maya::Spinden;
use Date::Calendar::Persian;
use Date::Calendar::Persian::Astronomical;

my @data-greg = (
       (2024, 10, 24, before-sunrise, 'gr', "Wednesday 06 Nov 2024"       , "Wed 24 Oct 2024 ☼" , "shift to daylight", "2024-11-06")
     , (2024, 10, 24, daylight,       'gr', "Wednesday 06 Nov 2024"       , "Wed 24 Oct 2024 ☼" , "no problem"       , "2024-11-06")
     , (2024, 10, 24, after-sunset,   'gr', "Wednesday 06 Nov 2024"       , "Wed 24 Oct 2024 ☼" , "shift to daylight", "2024-11-06")
            );

my @data-maya = (
       (2024, 11, 13, before-sunrise, 'm0', " 1 Mac 7 Etznab"            , "Tue 13 Nov 2024 ☼", "wrong profane date, should be  0 Mac")
     , (2024, 11, 13, daylight,       'm0', " 1 Mac 7 Etznab"            , "Tue 13 Nov 2024 ☼", "no problem")
     , (2024, 11, 13, after-sunset,   'm0', " 1 Mac 7 Etznab"            , "Tue 13 Nov 2024 ☼", "wrong clerical date, should be 8 Cauac")
     , (2020,  7, 14, before-sunrise, 'm1', "16 Xul 8 Ben"               , "Mon 14 Jul 2020 ☼", "wrong profane date, should be 15 Xul")
     , (2020,  7, 14, daylight,       'm1', "16 Xul 8 Ben"               , "Mon 14 Jul 2020 ☼", "no problem")
     , (2020,  7, 14, after-sunset,   'm1', "16 Xul 8 Ben"               , "Mon 14 Jul 2020 ☼", "wrong clerical date, should be 9 Ix")
     , (2023,  3,  4, before-sunrise, 'm2', "10 Cumku 10 Caban"          , "Fri 04 Mar 2023 ☼", "wrong profane date, should be  9 Cumku")
     , (2023,  3,  4, daylight,       'm2', "10 Cumku 10 Caban"          , "Fri 04 Mar 2023 ☼", "no problem")
     , (2023,  3,  4, after-sunset,   'm2', "10 Cumku 10 Caban"          , "Fri 04 Mar 2023 ☼", "wrong clerical date, should be 11 Etznab")
     , (2022, 10, 25, before-sunrise, 'a0', "15 Atlcahualo 11 Tochtli"   , "Mon 25 Oct 2022 ☼", "wrong profane date, should be 14 Atlcahualo")
     , (2022, 10, 25, daylight,       'a0', "15 Atlcahualo 11 Tochtli"   , "Mon 25 Oct 2022 ☼", "no problem")
     , (2022, 10, 25, after-sunset,   'a0', "15 Atlcahualo 11 Tochtli"   , "Mon 25 Oct 2022 ☼", "wrong clerical date, should be 12 Atl")
     , (2021,  6, 24, before-sunrise, 'a1', "20 Tepeilhuitl 7 Calli"     , "Wed 24 Jun 2021 ☼", "wrong profane date, should be 19 Tepeilhuitl")
     , (2021,  6, 24, daylight,       'a1', "20 Tepeilhuitl 7 Calli"     , "Wed 24 Jun 2021 ☼", "no problem")
     , (2021,  6, 24, after-sunset,   'a1', "20 Tepeilhuitl 7 Calli"     , "Wed 24 Jun 2021 ☼", "wrong clerical date, should be 8 Cuetzpalin")
            );

my @data-others = (
       (2024,  8,  3, before-sunrise, 'ba', "Istiqlál 16 Kal 0181"        , "Fri 03 Aug 2024 ☼" , "shift to daylight")
     , (2024,  8,  3, daylight,       'ba', "Istiqlál 16 Kal 0181"        , "Fri 03 Aug 2024 ☼" , "no problem")
     , (2024,  8,  3, after-sunset,   'ba', "Istiqlál 16 Kal 0181"        , "Fri 03 Aug 2024 ☼" , "wrong intermediate date")
     , (2024, 10,  1, before-sunrise, 'be', "Kamál 19 Mat 0181"           , "Mon 01 Oct 2024 ☼" , "shift to daylight")
     , (2024, 10,  1, daylight,       'be', "Kamál 19 Mat 0181"           , "Mon 01 Oct 2024 ☼" , "no problem")
     , (2024, 10,  1, after-sunset,   'be', "Kamál 19 Mat 0181"           , "Mon 01 Oct 2024 ☼" , "wrong intermediate date")
     , (2024,  7, 23, before-sunrise, 'co', "Pesnau 29 Epe 1740"          , "Mon 23 Jul 2024 ☼" , "shift to daylight")
     , (2024,  7, 23, daylight,       'co', "Pesnau 29 Epe 1740"          , "Mon 23 Jul 2024 ☼" , "no problem")
     , (2024,  7, 23, after-sunset,   'co', "Pesnau 29 Epe 1740"          , "Mon 23 Jul 2024 ☼" , "wrong intermediate date")
     , (2020,  1, 16, before-sunrise, 'et', "Hamus 20 Ter 2012"           , "Wed 16 Jan 2020 ☼" , "shift to daylight")
     , (2020,  1, 16, daylight,       'et', "Hamus 20 Ter 2012"           , "Wed 16 Jan 2020 ☼" , "no problem")
     , (2020,  1, 16, after-sunset,   'et', "Hamus 20 Ter 2012"           , "Wed 16 Jan 2020 ☼" , "wrong intermediate date")
     , (2022,  3, 18, before-sunrise, 'fr', "Primidi 11 Ger 0230"         , "Thu 18 Mar 2022 ☼" , "shift to daylight")
     , (2022,  3, 18, daylight,       'fr', "Primidi 11 Ger 0230"         , "Thu 18 Mar 2022 ☼" , "no problem")
     , (2022,  3, 18, after-sunset,   'fr', "Primidi 11 Ger 0230"         , "Thu 18 Mar 2022 ☼" , "shift to daylight")
     , (2024,  7, 27, before-sunrise, 'fa', "Tridi 23 The 0232"           , "Fri 27 Jul 2024 ☼" , "shift to daylight")
     , (2024,  7, 27, daylight,       'fa', "Tridi 23 The 0232"           , "Fri 27 Jul 2024 ☼" , "no problem")
     , (2024,  7, 27, after-sunset,   'fa', "Tridi 23 The 0232"           , "Fri 27 Jul 2024 ☼" , "shift to daylight")
     , (2021,  4,  8, before-sunrise, 'fe', "Duodi 02 Flo 0229"           , "Wed 08 Apr 2021 ☼" , "shift to daylight")
     , (2021,  4,  8, daylight,       'fe', "Duodi 02 Flo 0229"           , "Wed 08 Apr 2021 ☼" , "no problem")
     , (2021,  4,  8, after-sunset,   'fe', "Duodi 02 Flo 0229"           , "Wed 08 Apr 2021 ☼" , "shift to daylight")
     , (2025, 12, 17, before-sunrise, 'he', "Yom Shlishi 10 Tev 5786"     , "Tue 17 Dec 2025 ☼" , "shift to daylight")
     , (2025, 12, 17, daylight,       'he', "Yom Shlishi 10 Tev 5786"     , "Tue 17 Dec 2025 ☼" , "no problem")
     , (2025, 12, 17, after-sunset,   'he', "Yom Shlishi 10 Tev 5786"     , "Tue 17 Dec 2025 ☼" , "wrong intermediate date")
     , (2023,  6,  4, before-sunrise, 'hi', "Yaum al-Sabt 28 Qid 1444"    , "Sat 04 Jun 2023 ☼" , "shift to daylight")
     , (2023,  6,  4, daylight,       'hi', "Yaum al-Sabt 28 Qid 1444"    , "Sat 04 Jun 2023 ☼" , "no problem")
     , (2023,  6,  4, after-sunset,   'hi', "Yaum al-Sabt 28 Qid 1444"    , "Sat 04 Jun 2023 ☼" , "wrong intermediate date")
     , (2025, 10,  9, before-sunrise, 'pe', "Chahar shanbe 01 Aba 1404"   , "Wed 09 Oct 2025 ☼" , "shift to daylight")
     , (2025, 10,  9, daylight,       'pe', "Chahar shanbe 01 Aba 1404"   , "Wed 09 Oct 2025 ☼" , "no problem")
     , (2025, 10,  9, after-sunset,   'pe', "Chahar shanbe 01 Aba 1404"   , "Wed 09 Oct 2025 ☼" , "shift to daylight")
     , (2024, 11, 17, before-sunrise, 'pa', "Shanbe 10 Aza 1403"          , "Sat 17 Nov 2024 ☼" , "shift to daylight")
     , (2024, 11, 17, daylight,       'pa', "Shanbe 10 Aza 1403"          , "Sat 17 Nov 2024 ☼" , "no problem")
     , (2024, 11, 17, after-sunset,   'pa', "Shanbe 10 Aza 1403"          , "Sat 17 Nov 2024 ☼" , "shift to daylight")
            );

my %class =   a0 => 'Date::Calendar::Aztec'
            , a1 => 'Date::Calendar::Aztec::Cortes'
            , ba => 'Date::Calendar::Bahai'
            , be => 'Date::Calendar::Bahai::Astronomical'
            , gr => 'Date::Calendar::Gregorian'
            , co => 'Date::Calendar::Coptic'
            , et => 'Date::Calendar::Ethiopic'
            , fr => 'Date::Calendar::FrenchRevolutionary'
            , fa => 'Date::Calendar::FrenchRevolutionary::Arithmetic'
            , fe => 'Date::Calendar::FrenchRevolutionary::Astronomical'
            , he => 'Date::Calendar::Hebrew'
            , hi => 'Date::Calendar::Hijri'
            , jl => 'Date::Calendar::Julian'
            , jc => 'Date::Calendar::Julian::AUC'
            , m0 => 'Date::Calendar::Maya'
            , m1 => 'Date::Calendar::Maya::Astronomical'
            , m2 => 'Date::Calendar::Maya::Spinden'
            , pe => 'Date::Calendar::Persian'
            , pa => 'Date::Calendar::Persian::Astronomical'
            ;

my %ver   =   a0 => '0.0.3'
            , a1 => '0.0.3'
            , ba => '0.0.2'
            , pe => '0.0.2'
            , be => '0.0.2'
            , co => '0.0.3'
            , et => '0.0.3'
            , fr => '0.0.6'
            , fa => '0.0.6'
            , fe => '0.0.6'
            , gr => '0.0.2'
            , he => '0.0.4'
            , hi => '0.0.2'
            , jl => '0.0.4'
            , jc => '0.0.4'
            , m0 => '0.0.3'
            , m1 => '0.0.3'
            , m2 => '0.0.3'
            , pe => '0.0.2'
            , pa => '0.0.2'
            ;

plan 15 × @data-greg.elems + 12 × @data-others.elems + 12 × @data-maya.elems;

for (|@data-greg, |@data-others) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Julian $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%A %d %b %Y"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<jl>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push to $str2 and $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');

  # push-pull
  my Date::Calendar::Julian $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull to $str2 and $str3, $result");
  is($d4.^ver.Str.substr(0, 4), '0.1.');

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%A %d %b %Y"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<jl>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push to $str2 and $str3, $result");
  is($d6.^ver.Str.substr(0, 4), '0.1.');

  # pull-pull
  my Date::Calendar::Julian $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull to $str2 and $str3, $result");
  is($d7.^ver.Str.substr(0, 4), '0.1.');
}

for (@data-maya) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Julian $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);
  my Str $str1 = $d1.strftime("%a %d %b %Y %Ep");

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%e %B %V %A"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<jl>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push $str1 to $str2 and $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');

  # push-pull
  my Date::Calendar::Julian $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull $str1 to $str2 and $str3, $result");
  is($d4.^ver.Str.substr(0, 4), '0.1.');

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%e %B %V %A"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<jl>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push $str1 to $str2 and $str3, $result");
  is($d6.^ver.Str.substr(0, 4), '0.1.');

  # pull-pull
  my Date::Calendar::Julian $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull $str1 to $str2 and $str3, $result");
  is($d7.^ver.Str.substr(0, 4), '0.1.');
}

# Conversion with core class Date: only push-pull tests
for (@data-greg) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result, $str4) = $datum;
  my Date::Calendar::Julian $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  my $d2 = $d1.to-date('Date');
  is($d2.gist, $str4, "testing push from $year-$month-$day to $str4");
  my Date::Calendar::Julian $d3 .= new-from-date($d2);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull from $year-$month-$day to Gregorian $str4 and then $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');
}

done-testing;
